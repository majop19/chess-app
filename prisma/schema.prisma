// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  gamesAsWhite Game[]    @relation("WhitePlayer")
  gamesAsBlack Game[]    @relation("BlackPlayer")
  accounts     Account[]
  sessions     Session[]

}

model Game {
  id              String   @id @default(uuid())
  whiteId         String
  blackId         String
  winner          String? // "white", "black", or null for ongoing games
  timeControl     String // e.g., "10+5" (10 minutes + 5 seconds increment)
  isRated         Boolean  @default(false)
  status          String   @default("waiting") // "waiting", "active", "checkmate", "stalemate", "draw", "resigned", "timeout"
  turn            String   @default("white") // "white" or "black"
  pgn             String? // Store game moves in PGN format
  boardState      String   @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1") // FEN notation
  castlingRights  String   @default("KQkq") // Droits de roque (peut être extrait de FEN)
  enPassantTarget String? // Case cible pour la prise en passant (peut être extraite de FEN)
  halfMoveClock   Int      @default(0) // Demi-coups depuis la dernière capture ou mouvement de pion (pour la règle des 50 coups)
  fullMoveNumber  Int      @default(1) // Numéro de coup complet (s'incrémente après le coup des Noirs)
  whiteTime       Int? // Remaining time for white (seconds)
  blackTime       Int? // Remaining time for black (seconds)
  createdAt       DateTime @default(now())
  moves           Move[]

  white User @relation("WhitePlayer", fields: [whiteId], references: [id])
  black User @relation("BlackPlayer", fields: [blackId], references: [id])
}

model Move {
  id            String   @id @default(uuid())
  gameId        String
  moveNumber    Int
  color         String // "white" or "black"
  notation      String // PGN notation (e.g., "e4", "Nf3")
  fromSquare    String // E.g., "e2"
  toSquare      String // E.g., "e4"
  capturedPiece String? // Name of captured piece if any (e.g., "pawn")
  timestamp     DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
